apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-snapshot
spec:
  description: Creates a snapshot based on the component names, image refs and Git information passed to the task.
  params:
  - name: COMPONENTS
    description: A stringified JSON array with information about components with name, container image ref, git repo and git revision for each.
    type: string
  - name: PRODUCT_VERSION
    description: Product version to record as part of the Snapshot's name to be able to identify snapshots more easily. Pass here the result from determine-image-tag for the main image.
    type: string
  results:
  - name: SNAPSHOT_NAME
    description: Name of the snapshot created by this task.
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
    workingDir: /var/workdir
  steps:
  - name: render-snapshot
    image: registry.access.redhat.com/ubi9:latest@sha256:95356f4377e6ca6b8ad56fe33af8258d48010476aac287031dd572cfafceb285
    env:
    - name: APPLICATION_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['appstudio.openshift.io/application']
    - name: COMPONENTS
      value: $(params.COMPONENTS)
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: PIPELINE_RUN_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['tekton.dev/pipelineRun']
    - name: PRODUCT_VERSION
      value: $(params.PRODUCT_VERSION)
    - name: SNAPSHOT_NAME_RESULT_PATH
      value: $(results.SNAPSHOT_NAME.path)
    script: |
      #!/usr/bin/env python3

      import datetime
      import json
      import os
      import re


      def parse_components_input(raw_input):
          return json.loads(raw_input)


      def determine_resource_version_suffix(application_name):
          match = re.search(r"(?P<version>-\d+-\d+)$", application_name)
          if match:
              return match.group("version")
          return ""


      def determine_snapshot_name(prefix, product_version):
          # The timestamp is added to the Snapshot name so that we can differentiate Snapshots from rebuilds of the same commit or tag.
          timestamp = datetime.datetime.now(datetime.timezone.utc).strftime("%Y%m%dT%H%M%SZ")
          product_version_sanitized = re.sub(r"[^a-zA-Z0-9-]", "-", product_version)
          return f"{prefix}-{product_version_sanitized}-{timestamp}".lower()[:63]


      def process_component(component, resource_version_suffix):
          validate_component(component)
          return {
              "containerImage": component["containerImage"],
              "name": f"{component['name']}{resource_version_suffix}",
              "source": {
                  "git": {
                      "revision": component["revision"],
                      "url": component["repository"]
                  }
              }
          }


      def validate_component(component):
          assert (
              component["name"] != ""
              and component["containerImage"] != ""
              and component["revision"] != ""
              and component["repository"] != ""
          ), "Component must have component name, containerImage, revision and repository set."


      def construct_snapshot(
          snapshot_name,
          pipeline_run_name,
          namespace,
          application_name,
          components
      ):
          return {
              "apiVersion": "appstudio.redhat.com/v1alpha1",
              "kind": "Snapshot",
              "metadata": {
                  "name": snapshot_name,
                  "namespace": namespace,
                  "labels": {
                      "appstudio.openshift.io/build-pipelinerun": pipeline_run_name
                  }
              },
              "spec": {
                  "application": application_name,
                  "components": components
              }
          }


      def write_snapshot(snapshot, results_path):
          with open("snapshot.json", "w") as f:
              json.dump(snapshot, f)
          with open(results_path, "w", newline="") as f:
              f.write(snapshot["metadata"]["name"])


      def main():
          application_name = os.environ["APPLICATION_NAME"]
          raw_components = parse_components_input(os.environ["COMPONENTS"])
          namespace = os.environ["NAMESPACE"]
          pipeline_run_name = os.environ["PIPELINE_RUN_NAME"]
          product_version = os.environ["PRODUCT_VERSION"]
          snapshot_name_result_path = os.environ["SNAPSHOT_NAME_RESULT_PATH"]

          snapshot_name = determine_snapshot_name(application_name, product_version)
          resource_version_suffix = determine_resource_version_suffix(application_name)
          components = [process_component(c, resource_version_suffix) for c in raw_components]

          snapshot = construct_snapshot(
              snapshot_name=snapshot_name,
              pipeline_run_name=pipeline_run_name,
              namespace=namespace,
              application_name=application_name,
              components=components
          )

          write_snapshot(snapshot, snapshot_name_result_path)
          print("Rendered snapshot written to workspace.")

      if __name__ == "__main__":
          main()

  - name: create-snapshot
    image: registry.redhat.io/openshift4/ose-cli-rhel9@sha256:18152b1de8020b767818aa0a3aae29fb001cf3275a418f1d427b6a491dd9892d
    script: oc create -f snapshot.json
